name: Frontend Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'package-lock.json'
      - 'vite.config.*'
      - 'tsconfig*.json'
  workflow_dispatch: {}

env:
  AWS_REGION: us-east-1
  NODE_VERSION: 18

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install deps
        run: npm ci

      - name: (Optional) Run Frontend Tests
        continue-on-error: true
        run: npm run test:run

      - name: (Optional) Coverage
        continue-on-error: true
        run: npm run test:coverage

      - name: Upload Coverage Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: coverage

      - name: Build
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
        run: npm run build

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Read Terraform Outputs
        id: tfout
        working-directory: ./terraform
        run: |
          BUCKET=$(terraform output -raw frontend_s3_bucket)
          DIST_ID=$(terraform output -raw cloudfront_distribution_id)
          echo "bucket=$BUCKET" >> $GITHUB_OUTPUT
          echo "dist_id=$DIST_ID" >> $GITHUB_OUTPUT

      - name: Sync Static Assets (cacheable)
        run: |
          aws s3 sync dist/ s3://${{ steps.tfout.outputs.bucket }}/ \
            --delete \
            --cache-control "max-age=31536000" \
            --exclude "index.html" --exclude "*.html"

      - name: Upload HTML (no cache)
        run: |
          aws s3 cp dist/index.html s3://${{ steps.tfout.outputs.bucket }}/index.html \
            --cache-control "no-cache, no-store, must-revalidate"

      - name: Invalidate CDN
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ steps.tfout.outputs.dist_id }} --paths '/*'

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Done
        run: echo "Deployment complete. CDN Distribution ID: ${{ steps.tfout.outputs.dist_id }}"
