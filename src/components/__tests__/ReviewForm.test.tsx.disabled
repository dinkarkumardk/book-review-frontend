import { describe, it, expect, vi } from 'vitest'
import { render, screen } from '@testing-library/react'
import { ReviewForm } from '../ReviewForm'

// Mock AuthContext
vi.mock('@/context/AuthContext', () => ({
  useAuth: () => ({
    user: {
      id: '1',
      name: 'Test User',
      email: 'test@example.com'
    }
  }),
}))

// Mock API
vi.mock('@/services/api', () => ({
  default: {
    post: vi.fn().mockResolvedValue({ data: { id: '1' } }),
  },
}))

// Mock toast
vi.mock('react-hot-toast', () => ({
  default: {
    success: vi.fn(),
    error: vi.fn(),
  },
}))

describe('ReviewForm Component', () => {
  const defaultProps = {
    bookId: '1',
    onCreated: vi.fn(),
  }

  it('renders review form', () => {
    render(<ReviewForm {...defaultProps} />)
    
    expect(screen.getByPlaceholderText(/share your thoughts/i)).toBeInTheDocument()
  })

  it('renders rating stars', () => {
    render(<ReviewForm {...defaultProps} />)
    
    // Should have star rating elements
    const stars = screen.getAllByRole('button')
    expect(stars.length).toBeGreaterThan(0)
  })

  it('renders review textarea', () => {
    render(<ReviewForm {...defaultProps} />)
    
    const textarea = screen.getByRole('textbox')
    expect(textarea).toBeInTheDocument()
    expect(textarea).toHaveAttribute('placeholder', 'Share your thoughts about this book...')
  })

  it('renders submit button', () => {
    render(<ReviewForm {...defaultProps} />)
    
    const submitButton = screen.getByText('Post Review')
    expect(submitButton).toBeInTheDocument()
  })

  it('applies custom className', () => {
    const { container } = render(
      <ReviewForm {...defaultProps} className="custom-class" />
    )
    
    expect(container.firstChild).toHaveClass('custom-class')
  })

  it('has proper form structure', () => {
    render(<ReviewForm {...defaultProps} />)
    
    // Should have form elements
    expect(screen.getByPlaceholderText(/share your thoughts/i)).toBeInTheDocument()
    expect(screen.getByRole('button', { name: /submit review/i })).toBeInTheDocument()
  })

  describe('User Authentication', () => {
    it('shows form for authenticated users', () => {
      // Current mock shows authenticated user, form should be visible
      render(<ReviewForm {...defaultProps} />)
      expect(screen.getByRole('button', { name: /submit review/i })).toBeInTheDocument()
    })
  })

  describe('Form Interactions', () => {
    it('allows rating selection', () => {
      render(<ReviewForm {...defaultProps} />)
      
      // Check for rating stars/buttons
      const ratingElements = screen.getAllByRole('button')
      expect(ratingElements.length).toBeGreaterThan(1)
    })

    it('allows text input', () => {
      render(<ReviewForm {...defaultProps} />)
      
      const textarea = screen.getByPlaceholderText(/share your thoughts/i)
      expect(textarea).toBeInTheDocument()
      expect(textarea.tagName).toBe('TEXTAREA')
    })

    it('validates required fields before submission', () => {
      render(<ReviewForm {...defaultProps} />)
      
      const submitButton = screen.getByRole('button', { name: /submit review/i })
      expect(submitButton).toBeInTheDocument()
    })
  })

  describe('Form Submission', () => {
    it('handles successful submission', () => {
      render(<ReviewForm {...defaultProps} />)
      
      const submitButton = screen.getByRole('button', { name: /submit review/i })
      expect(submitButton).not.toBeDisabled()
    })

    it('disables form during submission', () => {
      render(<ReviewForm {...defaultProps} />)
      
      // Form should be interactive when not submitting
      const textarea = screen.getByPlaceholderText(/share your thoughts/i)
      expect(textarea).not.toBeDisabled()
    })
  })

  describe('Draft Management', () => {
    it('handles draft persistence', () => {
      render(<ReviewForm {...defaultProps} />)
      
      // Should render form for draft functionality
      expect(screen.getByPlaceholderText(/share your thoughts/i)).toBeInTheDocument()
    })

    it('manages form state correctly', () => {
      render(<ReviewForm {...defaultProps} />)
      
      // Should have interactive form elements
      const submitButton = screen.getByRole('button', { name: /submit review/i })
      expect(submitButton).toBeInTheDocument()
    })
  })

  describe('Props Handling', () => {
    it('accepts bookId prop', () => {
      render(<ReviewForm bookId="test-book-123" />)
      
      // Should render regardless of bookId value
      expect(screen.getByPlaceholderText(/share your thoughts/i)).toBeInTheDocument()
    })

    it('handles onCreated callback prop', () => {
      const mockCallback = vi.fn()
      render(<ReviewForm {...defaultProps} onCreated={mockCallback} />)
      
      // Should render with callback
      expect(screen.getByRole('button', { name: /submit review/i })).toBeInTheDocument()
    })

    it('applies custom className', () => {
      const { container } = render(<ReviewForm {...defaultProps} className="custom-class" />)
      
      // Should apply custom styling
      expect(container.querySelector('.custom-class')).toBeInTheDocument()
    })
  })
})